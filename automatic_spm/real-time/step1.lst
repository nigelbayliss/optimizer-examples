PL/SQL procedure successfully completed.


PL/SQL procedure successfully completed.


System altered.

SQL> --
SQL> -- Create two tables
SQL> --
SQL> set echo on
SQL> drop table if exists sales_area1 purge;

Table dropped.

SQL> drop table if exists sales_area2 purge;

Table dropped.

SQL> 
SQL> create table sales_area1 (sale_code number(10), b varchar2(2000), amount number(10,2), sale_type number(10), c varchar2(1000));

Table created.

SQL> 
SQL> 
SQL> var str VARCHAR2(1200)
SQL> exec :str := dbms_random.string('u',2000);

PL/SQL procedure successfully completed.

SQL> var str2 VARCHAR2(1200)
SQL> exec :str2 := dbms_random.string('u',10);

PL/SQL procedure successfully completed.

SQL> insert /*+ APPEND */ into sales_area1
  2  select mod(rn,1000), :str, rn/1000, mod(rn,100),:str2
  3  from (
  4  	 select trunc((rownum+1)/2) as rn, mod(rownum+1,2) as parity
  5  	 from (select null from dual connect by level <= 4000)
  6  	    , (select null from dual connect by level <= 500)
  7  	  );

2000000 rows created.

SQL> 
SQL> commit;

Commit complete.

SQL> 
SQL> create table sales_area2 as select sale_code,b,rownum/1000 amount,sale_type,c from sales_area1;

Table created.

SQL> 
SQL> create index sales_area1i on sales_area1 (sale_code);

Index created.

SQL> --create index sales_area2i on sales_area2 (sale_code);
SQL> create index sales_typ1i on sales_area1 (sale_type);

Index created.

SQL> create index sales_typ2i on sales_area2 (sale_type);

Index created.

SQL> --
SQL> -- Gather statistics (without histograms for the purposes of this test)
SQL> --
SQL> exec dbms_stats.gather_table_stats(user,'sales_area1',method_opt=>'for all columns size 1',no_invalidate=>false)

PL/SQL procedure successfully completed.

SQL> exec dbms_stats.gather_table_stats(user,'sales_area2',method_opt=>'for all columns size 1',no_invalidate=>false)

PL/SQL procedure successfully completed.

SQL> 
SQL> --
SQL> -- Enable real-time SPM
SQL> --
SQL> @@auto
SQL> --
SQL> -- Enable real-time SPM
SQL> --
SQL> exec dbms_spm.configure('AUTO_SPM_EVOLVE_TASK', 'AUTO')

PL/SQL procedure successfully completed.

SQL> --
SQL> -- Execute the query, manipulating the cost to yield a poor plan
SQL> --
SQL> @@cost_bad
SQL> --
SQL> -- We are going to manipulate parameters to induce SQL performance issues
SQL> -- In this case, we'll induce a poor plan by adjusting the index cost
SQL> --
SQL> alter session set optimizer_index_cost_adj = 10000
  2  /

Session altered.

SQL> @@q
SQL> set timing on
SQL> 
SQL> set echo on
SQL> select /* SPM_TEST_QUERY_Q1 */ sum(t2.amount)
  2  from   sales_area1 t1,
  3  	    sales_area2 t2
  4  where  t1.sale_code = t2.sale_code
  5  and    t1.sale_type  = 1;

SUM(T2.AMOUNT)
--------------
    3.9996E+10

Elapsed: 00:00:02.19
SQL> set echo off

PLAN_TABLE_OUTPUT
----------------------------------------------------------------------------------------------------------------------------------
SQL_ID  g6hqazvppxq6m, child number 0
-------------------------------------
select /* SPM_TEST_QUERY_Q1 */ sum(t2.amount) from   sales_area1 t1,
    sales_area2 t2 where  t1.sale_code = t2.sale_code and
t1.sale_type  = 1

Plan hash value: 1785747100

-----------------------------------------------------------------------------------
| Id  | Operation           | Name        | Rows  | Bytes | Cost (%CPU)| Time     |
-----------------------------------------------------------------------------------
|   0 | SELECT STATEMENT    |             |       |       |   217K(100)|          |
|   1 |  SORT AGGREGATE     |             |     1 |    17 |            |          |
|*  2 |   HASH JOIN         |             |    40M|   648M|   217K  (1)| 00:00:09 |
|*  3 |    TABLE ACCESS FULL| SALES_AREA1 | 20000 |   136K|   108K  (1)| 00:00:05 |
|   4 |    TABLE ACCESS FULL| SALES_AREA2 |  2000K|    19M|   108K  (1)| 00:00:05 |
-----------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access("T1"."SALE_CODE"="T2"."SALE_CODE")
   3 - filter("T1"."SALE_TYPE"=1)


24 rows selected.

Elapsed: 00:00:00.41
SQL> @@q
SQL> set timing on
SQL> 
SQL> set echo on
SQL> select /* SPM_TEST_QUERY_Q1 */ sum(t2.amount)
  2  from   sales_area1 t1,
  3         sales_area2 t2
  4  where  t1.sale_code = t2.sale_code
  5  and    t1.sale_type  = 1;

SUM(T2.AMOUNT)
--------------
    3.9996E+10

Elapsed: 00:00:02.16
SQL> set echo off

PLAN_TABLE_OUTPUT
----------------------------------------------------------------------------------------------------------------------------------
SQL_ID  g6hqazvppxq6m, child number 0
-------------------------------------
select /* SPM_TEST_QUERY_Q1 */ sum(t2.amount) from   sales_area1 t1,
    sales_area2 t2 where  t1.sale_code = t2.sale_code and
t1.sale_type  = 1

Plan hash value: 1785747100

-----------------------------------------------------------------------------------
| Id  | Operation           | Name        | Rows  | Bytes | Cost (%CPU)| Time     |
-----------------------------------------------------------------------------------
|   0 | SELECT STATEMENT    |             |       |       |   217K(100)|          |
|   1 |  SORT AGGREGATE     |             |     1 |    17 |            |          |
|*  2 |   HASH JOIN         |             |    40M|   648M|   217K  (1)| 00:00:09 |
|*  3 |    TABLE ACCESS FULL| SALES_AREA1 | 20000 |   136K|   108K  (1)| 00:00:05 |
|   4 |    TABLE ACCESS FULL| SALES_AREA2 |  2000K|    19M|   108K  (1)| 00:00:05 |
-----------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   2 - access("T1"."SALE_CODE"="T2"."SALE_CODE")
   3 - filter("T1"."SALE_TYPE"=1)


24 rows selected.

Elapsed: 00:00:00.02
SQL> --
SQL> -- Wait now for SQL statement to appear in SYS_AUTO_STS
SQL> --
SQL> @@wait_asts
SQL> --
SQL> -- Wait for the Auto SQL Tuning Set Capture Task
SQL> --
SQL> prompt Waiting for Auto SQL Tuning Set Capture...
Waiting for Auto SQL Tuning Set Capture...
SQL> prompt By default, this is 15mins, but we'll temporarilty shorten it to two mins speed things up
By default, this is 15mins, but we'll temporarilty shorten it to two mins speed things up
SQL> --
SQL> exec dbms_auto_task_admin.modify_autotask_setting('Auto STS Capture Task', 'INTERVAL', 120)

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.02
SQL> --
SQL> @@task
SQL> set pagesize 1000
SQL> set linesize 250
SQL> set trims on
SQL> column task_name format a30
SQL> 
SQL> select current_timestamp now from dual;

NOW
---------------------------------------------------------------------------
06-JUN-25 02.56.30.460319 PM +00:00

Elapsed: 00:00:00.00
SQL> 
SQL> 
SQL> select task_name, interval,status, last_schedule_time, systimestamp-last_schedule_time ago
  2  from dba_autotask_schedule_control
  3  where dbid = sys_context('userenv','con_dbid')
  4  and (task_name = 'Auto STS Capture Task'
  5       or
  6       task_name = 'Auto SPM Task');

TASK_NAME                        INTERVAL STATUS     LAST_SCHEDULE_TIME                                                          AGO
------------------------------ ---------- ---------- --------------------------------------------------------------------------- ---------------------------------------------------------------------------
Auto STS Capture Task                 120 SUCCEEDED  06-JUN-25 02.51.52.692 PM +00:00                                            +000000000 00:04:37.819738
Auto SPM Task                        3600 SUCCEEDED  06-JUN-25 02.26.45.464 PM +00:00                                            +000000000 00:29:45.047738

Elapsed: 00:00:00.05
SQL> declare
  2      lasttime timestamp ;
  3      thistime timestamp ;
  4      executed boolean := false;
  5      sts varchar2(20);
  6      n number := 0;
  7      cursor c1 is
  8          select last_schedule_time,status
  9          into   thistime,sts
 10          from   dba_autotask_schedule_control
 11          where  dbid = sys_context('userenv','con_dbid')
 12          and    task_name = 'Auto STS Capture Task';
 13  begin
 14      open c1;
 15      fetch c1 into lasttime,sts;
 16      close c1;
 17      while not executed
 18      loop
 19          open c1;
 20          fetch c1 into thistime,sts;
 21          close c1;
 22          if thistime>lasttime and sts = 'SUCCEEDED' and n > 0
 23          then
 24              executed := true;
 25          else
 26              dbms_lock.sleep(2);
 27          end if;
 28          n := n + 1;
 29      end loop;
 30  end;
 31  /

PL/SQL procedure successfully completed.

Elapsed: 00:00:24.04
SQL> --
SQL> @@task
SQL> set pagesize 1000
SQL> set linesize 250
SQL> set trims on
SQL> column task_name format a30
SQL> 
SQL> select current_timestamp now from dual;

NOW
---------------------------------------------------------------------------
06-JUN-25 02.56.54.553117 PM +00:00

Elapsed: 00:00:00.00
SQL> 
SQL> 
SQL> select task_name, interval,status, last_schedule_time, systimestamp-last_schedule_time ago
  2  from dba_autotask_schedule_control
  3  where dbid = sys_context('userenv','con_dbid')
  4  and (task_name = 'Auto STS Capture Task'
  5       or
  6       task_name = 'Auto SPM Task');

TASK_NAME                        INTERVAL STATUS     LAST_SCHEDULE_TIME                                                          AGO
------------------------------ ---------- ---------- --------------------------------------------------------------------------- ---------------------------------------------------------------------------
Auto STS Capture Task                 120 SUCCEEDED  06-JUN-25 02.56.53.301 PM +00:00                                            +000000000 00:00:01.252500
Auto SPM Task                        3600 SUCCEEDED  06-JUN-25 02.26.45.464 PM +00:00                                            +000000000 00:30:09.089500

Elapsed: 00:00:00.00
SQL> --
SQL> -- Back to the default
SQL> --
SQL> exec dbms_auto_task_admin.modify_autotask_setting('Auto STS Capture Task', 'INTERVAL', 900)

PL/SQL procedure successfully completed.

Elapsed: 00:00:00.00
SQL> @@asts
SQL> set linesize 250
SQL> set pagesize 1000
SQL> column txt format a100
SQL> column sql_plan_baseline format a50
SQL> column exact_matching_signature format 999999999999999999999999999
SQL> 
SQL> --
SQL> -- For real-time SPM to kick in, the initial plan must be captured in the
SQL> -- automatic SQL tuning set. The following query will return a row if the
SQL> -- SQL statement has been captured.
SQL> --
SQL> select substr(sql_text,1,100) txt,executions,decode(executions,0,-1,round(buffer_gets/executions)) bget_per_exec,plan_hash_value,exact_matching_signature
  2  from dba_sqlset_statements
  3  where sqlset_name = 'SYS_AUTO_STS'
  4  and sql_text like 'select /* SPM_TEST_QUERY_Q1 */%'
  5  order by 3;

TXT                                                                                                  EXECUTIONS BGET_PER_EXEC PLAN_HASH_VALUE     EXACT_MATCHING_SIGNATURE
---------------------------------------------------------------------------------------------------- ---------- ------------- --------------- ----------------------------
select /* SPM_TEST_QUERY_Q1 */ sum(t2.amount)                                                                 2        800524      1785747100          2325180225210358832
from   sales_area1 t1,
       sale


Elapsed: 00:00:00.07

